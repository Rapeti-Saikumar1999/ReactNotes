//react

//what is react ?
// is a open source library(some has wrote we are using it) for building user interfaces


/*

why node is installed for react app?
node is a runtime env which helps to run the js code outside the browser directly.
and also the script to install react application is based on node (npx create-react-app app-01)

npm - node package manager(helps in installing dependencies in the project using node.js)
ex: npm install axios
npm uninstall axios

for specific version -> npm i axios@....;

for latest -> npm i axios@latest

for global install  -> npm i -g axios@latest



npx - node package executer() - allows us to run javascript packages without installing it(used only once).


package.json - tells what kind of dependencies this application is holding currently.


package-lock.json - advanced version of package.json gives u dependencies of dependencies and theirs versions.


node_modules - all the scripts of dependencies will be present 


npm install - install all the dependencies


gitignore - to untrack the particular files


public and src - are main folders to show the content

src - 

pubic - 

ReactDOM - how? & where?

React - what ? to mount

we should only return only one div in a particular component

*/


// why react?
// to simplify DOM manipulation
// faster making UI
// learning curve is less
// easy to understand

// components - superPower(reusablity of piece of code)
  
// code maintainablity - high vice Versa code readability

start // - npm start

// react is an single page application composed of components

// in react we can only render one tag

const root = reactDOM.createRoot(document.getElementById("root"));
root.render(
    // only one tag possible
)


//JSX - javascript expression
//javascript embidded html - means we can write html inside JS
function App()
{
    <div>
        <h1>Hello world</h1>
        <p>Welcome to my world sai kumar </p>
    </div>
}
export default App;


//js inside JSX
function App()
{
    return (<div>
        <h1>Hello world</h1>
        <p>Welcome to my world Mr.Saikumar Rapeti</p>
        <p>{1+2}</p>  --  javascript
    </div>)
}

//we can not write for loop inside JSX because its an loop not an expression 
//instead we can use MAP expression

// {[1,2,3].map((e)=>
//     (
//         <p>{e*100}</p>
//     )

//     }

// you can write only expressions not statements


//per file of JSX we can have multiple normal exports 
//Nav.js fle 
function add(a,b)
{
    return a+b;
}
function Nav()
{
    return (<div>This is nav{add(1,23)}</div>)
}

export {add,Nav};
import {add,Nav} from "./Nav";


//only one default export

//nav.jsx file
function add(a,b)
{
return a+b;
}

function sub(a,b)
{
    return a-b;
}

function Nav()
{
    return(
        <div>

        </div>
    );
 }

export default Nav; //default export
export {add,sub}; //normal exorts 
import Nav, {add,sub} from "Nav"; //importing default and normal exports


//defer 
//it will download and compile the code ready and executes once after all the HTML code rendered.



//what can we export and import - modules

//styling in react - Method 1 inline css
const nav = ()=>
{
    const navStyles = {
        backgroundColor:"red",
        border: "2px solid black",
    };
    return <div style={navStyles}>This is Nav Bar!</div>;
};


//method 2 - via external 
//treat styles sheet as module
step1: chnage the file name to "footer.module.css"  - as modules can be exported or imported
step2: write css in modified css file
// .footerStyles
// {
//     background-color:red;
// }

step3: import the css module and include the styles

// import something from "./footer.module.css"
// const footer = ()=>
// {
//     return <div className={something.footerStyles}>This is Footer</div>;
// }


//virtual DOM
when there is an update in specific part the virtual DOM takes the snapshot of the prev and present,
it will compare both and make changes only the modified part.

where as the actual DOM it rerenders all the DOM


